package soccerwc;

import comparators.BeerComparator;
import soccerwc.model.FootballMatch;
import soccerwc.model.FootballTeam;
import soccerwc.model.Husband;
import soccerwc.model.MarriedCouple;
import soccerwc.model.Wife;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.function.Predicate;
import javax.swing.JOptionPane;

/**
 *
 * Display tha main window, and method for handle the button
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private List<MarriedCouple> couplesList;
    private List<FootballTeam> footballTeams;
    private double allBeer;
    private int allFreeTime;
    
    public MainWindow() {
        initComponents();
        initVariables();
        
        setLocationRelativeTo(null);
        this.setTitle("Foci VB");
        couplesUploadFromFile();
        
        teamsUploadFromFile();
        initCouples();
        initLabels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        coupleTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        wifeTextArea = new javax.swing.JTextArea();
        matchButton = new javax.swing.JButton();
        wifeLabel = new javax.swing.JLabel();
        coupleLabel = new javax.swing.JLabel();
        husbandLabel = new javax.swing.JLabel();
        playingTeamLabel = new javax.swing.JLabel();
        averageBeerLabel = new javax.swing.JLabel();
        allFreeTLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        husbandTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        coupleTextArea.setEditable(false);
        coupleTextArea.setColumns(20);
        coupleTextArea.setRows(5);
        jScrollPane1.setViewportView(coupleTextArea);

        wifeTextArea.setEditable(false);
        wifeTextArea.setColumns(20);
        wifeTextArea.setRows(5);
        jScrollPane2.setViewportView(wifeTextArea);

        matchButton.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        matchButton.setText("Meccs");
        matchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchButtonActionPerformed(evt);
            }
        });

        wifeLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        wifeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wifeLabel.setText("Feleségek");

        coupleLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        coupleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        coupleLabel.setText("Házaspárok");

        husbandLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        husbandLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        husbandLabel.setText("Férjek");

        playingTeamLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        playingTeamLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playingTeamLabel.setText("Here will the team name");

        averageBeerLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        averageBeerLabel.setText("Átlagosan");

        allFreeTLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        allFreeTLabel.setText("Összesen");

        husbandTextArea.setEditable(false);
        husbandTextArea.setColumns(20);
        husbandTextArea.setRows(5);
        jScrollPane4.setViewportView(husbandTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(178, Short.MAX_VALUE)
                .addComponent(playingTeamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(196, 196, 196))
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coupleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(matchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(husbandLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(averageBeerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(wifeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(allFreeTLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playingTeamLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wifeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(husbandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coupleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(averageBeerLabel)
                    .addComponent(allFreeTLabel))
                .addGap(57, 57, 57))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void matchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchButtonActionPerformed
        FootballMatch footballMatch = new FootballMatch();

        Random rnd = new Random();
        
        Collections.shuffle(footballTeams);

        footballMatch.setTeamOne(footballTeams.get(0));
        footballMatch.setTeamTwo(footballTeams.get(1));

        playingTeamLabel.setVisible(true);
        playingTeamLabel.setText(footballMatch.getTeamOne().getName() + " - " + footballMatch.getTeamTwo().getName());
        // 70% probability to will overtime
        if (rnd.nextInt(100) > 30) {
            footballMatch.setOverTimeMatch(false);
        }else{
            footballMatch.setOverTimeMatch(true);
        }
        // 80% probability to will good match 
        if (rnd.nextInt(100) > 20) {
            footballMatch.setGoodMatch(true);
        }else{
            footballMatch.setGoodMatch(false);
        }
        couplesList.forEach(item -> {
            // 60 % probablitity to will watch the match, and cant watch same match
            if (rnd.nextInt(100) > 40 && !isNewMatch(item,footballMatch)) {

                item.getHusband().getWachedMatch().add(footballMatch);
                item.getHusband().watchingMatch(footballMatch);
                item.getWife().getWachedMatch().add(footballMatch);
                item.getWife().watchingMatch(footballMatch);
            }
        });

        resultDisplaying();
    }//GEN-LAST:event_matchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel allFreeTLabel;
    private javax.swing.JLabel averageBeerLabel;
    private javax.swing.JLabel coupleLabel;
    private javax.swing.JTextArea coupleTextArea;
    private javax.swing.JLabel husbandLabel;
    private javax.swing.JTextArea husbandTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton matchButton;
    private javax.swing.JLabel playingTeamLabel;
    private javax.swing.JLabel wifeLabel;
    private javax.swing.JTextArea wifeTextArea;
    // End of variables declaration//GEN-END:variables

    private void couplesUploadFromFile() {
        List<Husband> husbands = new ArrayList<>();
        List<Wife> wifes = new ArrayList<>();
        List<String> allParts = new ArrayList<>();
        try {
            BufferedReader br = new BufferedReader(new FileReader("resources/nameList.csv"));
            String line;
            //Read the data from the file and split every line by ";".
            while ((line = br.readLine()) != null) {
                allParts.addAll(Arrays.asList(line.split(";")));
            }

            int count = 0;
            // Separate wife and husband from the collection
            for (String allPart : allParts) {
                if (count % 2 == 0) {
                    husbands.add(new Husband(allPart.substring(5, allPart.length()), 0));
                } else {
                    wifes.add(new Wife(allPart.substring(8, allPart.length()), 0));
                }
                count++;
            }
            //Upload the married couple collection
            for (int i = 0; i < husbands.size(); i++) {
                couplesList.add(new MarriedCouple(husbands.get(i), wifes.get(i)));
            }

            br.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "Hiba", JOptionPane.WARNING_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "Hiba", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void teamsUploadFromFile() {

        try {
            BufferedReader br = new BufferedReader(new FileReader("resources/footballTeams.csv"));
            String line;
            while ((line = br.readLine()) != null) {
                footballTeams.add(new FootballTeam(line));
            }

            br.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "Hiba", JOptionPane.WARNING_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, ex, "Hiba", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void initCouples() {
        couplesList.forEach(i -> {
            coupleTextArea.append(i.getHusband().getName() + " - " + i.getWife().getName() + "\n");
            husbandTextArea.append(i.getHusband().getName() + " " + i.getHusband().getBeersNumber() + " sört ivott. \n");
            wifeTextArea.append(i.getWife().getName() + " szabadideje: " + i.getWife().getFreeTime() + " perc \n");
        });
    }

    private void initLabels() {

        playingTeamLabel.setVisible(false);
        averageBeerLabel.setVisible(false);
        allFreeTLabel.setVisible(false);

    }

    private void resultDisplaying() {
        husbandTextArea.setText("");
        wifeTextArea.setText("");
        averageBeerLabel.setVisible(true);
        allFreeTLabel.setVisible(true);
        allBeer=0;
        allFreeTime=0;
        //Sorting couple list by beer
        Collections.sort(couplesList, new BeerComparator());
        
        for (int i = 0; i < couplesList.size(); i++) {
            husbandTextArea.append(couplesList.get(i).getHusband().getName() + " " + couplesList.get(i).getHusband().getBeersNumber() + " sört ivott. \n");
            wifeTextArea.append(couplesList.get(i).getWife().getName() + " szabadideje: " + couplesList.get(i).getWife().getFreeTime() + " perc \n");
            allBeer += couplesList.get(i).getHusband().getBeersNumber();
            allFreeTime+=couplesList.get(i).getWife().getFreeTime();
        }
        DecimalFormat df = new DecimalFormat("#.#");
        double averageBeer = allBeer/couplesList.size();
        averageBeerLabel.setText("Átlagosan "+df.format(averageBeer)+" sör");
        allFreeTLabel.setText("Összesen "+allFreeTime+" perc");
    }

    private void initVariables() {
        couplesList = new ArrayList<>();
        footballTeams = new ArrayList<>();
        
    }

    private boolean isNewMatch(MarriedCouple marriedCouple,FootballMatch footballMatch) {
        //Looking for matches between actual footballmatch team name , and watched match team name
        List<Predicate<FootballMatch>> allPredicates = new ArrayList<>();
        allPredicates.add(g->g.getTeamOne().getName().contains(footballMatch.getTeamOne().getName()));
        allPredicates.add(g->g.getTeamTwo().getName().contains(footballMatch.getTeamTwo().getName()));
        boolean isWatched = marriedCouple.getHusband().getWachedMatch().stream().
                        anyMatch(allPredicates.stream().reduce(x->true, Predicate::and));
        
        return isWatched;
    }
}
